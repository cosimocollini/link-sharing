// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, email, password, first_name, last_name, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id, email, public_email, password, first_name, last_name, created_at, updated_at
`

type CreateUserParams struct {
	ID        string
	Email     string
	Password  string
	FirstName sql.NullString
	LastName  sql.NullString
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.FirstName,
		arg.LastName,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PublicEmail,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, public_email, password, first_name, last_name, created_at, updated_at FROM users WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PublicEmail,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, public_email, password, first_name, last_name, created_at, updated_at FROM users WHERE id = ?
`

func (q *Queries) GetUserById(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PublicEmail,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPersonalInfo = `-- name: UpdateUserPersonalInfo :one
UPDATE users
SET first_name = ?, last_name = ?, public_email = ?, updated_at = ?
WHERE id = ?
RETURNING id, email, public_email, password, first_name, last_name, created_at, updated_at
`

type UpdateUserPersonalInfoParams struct {
	FirstName   sql.NullString
	LastName    sql.NullString
	PublicEmail sql.NullString
	UpdatedAt   time.Time
	ID          string
}

func (q *Queries) UpdateUserPersonalInfo(ctx context.Context, arg UpdateUserPersonalInfoParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPersonalInfo,
		arg.FirstName,
		arg.LastName,
		arg.PublicEmail,
		arg.UpdatedAt,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PublicEmail,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
